/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as dashboardRouteRouteImport } from './routes/(dashboard)/route'
import { Route as dashboardIndexRouteImport } from './routes/(dashboard)/index'
import { Route as ApiSplatRouteImport } from './routes/api/$'
import { Route as dashboardRecentRouteImport } from './routes/(dashboard)/recent'
import { Route as authAuthRouteImport } from './routes/(auth)/auth'
import { Route as ApiRpcSplatRouteImport } from './routes/api/rpc/$'
import { Route as dashboardArgumentIdRouteImport } from './routes/(dashboard)/argument/$id'

const dashboardRouteRoute = dashboardRouteRouteImport.update({
  id: '/(dashboard)',
  getParentRoute: () => rootRouteImport,
} as any)
const dashboardIndexRoute = dashboardIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => dashboardRouteRoute,
} as any)
const ApiSplatRoute = ApiSplatRouteImport.update({
  id: '/api/$',
  path: '/api/$',
  getParentRoute: () => rootRouteImport,
} as any)
const dashboardRecentRoute = dashboardRecentRouteImport.update({
  id: '/recent',
  path: '/recent',
  getParentRoute: () => dashboardRouteRoute,
} as any)
const authAuthRoute = authAuthRouteImport.update({
  id: '/(auth)/auth',
  path: '/auth',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiRpcSplatRoute = ApiRpcSplatRouteImport.update({
  id: '/api/rpc/$',
  path: '/api/rpc/$',
  getParentRoute: () => rootRouteImport,
} as any)
const dashboardArgumentIdRoute = dashboardArgumentIdRouteImport.update({
  id: '/argument/$id',
  path: '/argument/$id',
  getParentRoute: () => dashboardRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof dashboardIndexRoute
  '/auth': typeof authAuthRoute
  '/recent': typeof dashboardRecentRoute
  '/api/$': typeof ApiSplatRoute
  '/argument/$id': typeof dashboardArgumentIdRoute
  '/api/rpc/$': typeof ApiRpcSplatRoute
}
export interface FileRoutesByTo {
  '/auth': typeof authAuthRoute
  '/recent': typeof dashboardRecentRoute
  '/api/$': typeof ApiSplatRoute
  '/': typeof dashboardIndexRoute
  '/argument/$id': typeof dashboardArgumentIdRoute
  '/api/rpc/$': typeof ApiRpcSplatRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/(dashboard)': typeof dashboardRouteRouteWithChildren
  '/(auth)/auth': typeof authAuthRoute
  '/(dashboard)/recent': typeof dashboardRecentRoute
  '/api/$': typeof ApiSplatRoute
  '/(dashboard)/': typeof dashboardIndexRoute
  '/(dashboard)/argument/$id': typeof dashboardArgumentIdRoute
  '/api/rpc/$': typeof ApiRpcSplatRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/auth'
    | '/recent'
    | '/api/$'
    | '/argument/$id'
    | '/api/rpc/$'
  fileRoutesByTo: FileRoutesByTo
  to: '/auth' | '/recent' | '/api/$' | '/' | '/argument/$id' | '/api/rpc/$'
  id:
    | '__root__'
    | '/(dashboard)'
    | '/(auth)/auth'
    | '/(dashboard)/recent'
    | '/api/$'
    | '/(dashboard)/'
    | '/(dashboard)/argument/$id'
    | '/api/rpc/$'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  dashboardRouteRoute: typeof dashboardRouteRouteWithChildren
  authAuthRoute: typeof authAuthRoute
  ApiSplatRoute: typeof ApiSplatRoute
  ApiRpcSplatRoute: typeof ApiRpcSplatRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(dashboard)': {
      id: '/(dashboard)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof dashboardRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(dashboard)/': {
      id: '/(dashboard)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof dashboardIndexRouteImport
      parentRoute: typeof dashboardRouteRoute
    }
    '/api/$': {
      id: '/api/$'
      path: '/api/$'
      fullPath: '/api/$'
      preLoaderRoute: typeof ApiSplatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(dashboard)/recent': {
      id: '/(dashboard)/recent'
      path: '/recent'
      fullPath: '/recent'
      preLoaderRoute: typeof dashboardRecentRouteImport
      parentRoute: typeof dashboardRouteRoute
    }
    '/(auth)/auth': {
      id: '/(auth)/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof authAuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/rpc/$': {
      id: '/api/rpc/$'
      path: '/api/rpc/$'
      fullPath: '/api/rpc/$'
      preLoaderRoute: typeof ApiRpcSplatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(dashboard)/argument/$id': {
      id: '/(dashboard)/argument/$id'
      path: '/argument/$id'
      fullPath: '/argument/$id'
      preLoaderRoute: typeof dashboardArgumentIdRouteImport
      parentRoute: typeof dashboardRouteRoute
    }
  }
}

interface dashboardRouteRouteChildren {
  dashboardRecentRoute: typeof dashboardRecentRoute
  dashboardIndexRoute: typeof dashboardIndexRoute
  dashboardArgumentIdRoute: typeof dashboardArgumentIdRoute
}

const dashboardRouteRouteChildren: dashboardRouteRouteChildren = {
  dashboardRecentRoute: dashboardRecentRoute,
  dashboardIndexRoute: dashboardIndexRoute,
  dashboardArgumentIdRoute: dashboardArgumentIdRoute,
}

const dashboardRouteRouteWithChildren = dashboardRouteRoute._addFileChildren(
  dashboardRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  dashboardRouteRoute: dashboardRouteRouteWithChildren,
  authAuthRoute: authAuthRoute,
  ApiSplatRoute: ApiSplatRoute,
  ApiRpcSplatRoute: ApiRpcSplatRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { startInstance } from './start.ts'
declare module '@tanstack/react-start' {
  interface Register {
    router: Awaited<ReturnType<typeof getRouter>>
    config: Awaited<ReturnType<typeof startInstance.getOptions>>
  }
}
